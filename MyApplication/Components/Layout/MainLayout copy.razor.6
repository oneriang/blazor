@inherits LayoutComponentBase
@using MyApplication.Components

<MyMudThemeProvider />
<MyMudProviders />

@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Rendering;
@using Newtonsoft.Json;
@using System.ComponentModel;
@using Newtonsoft.Json.Linq;
@using System;
@* @using MudBlazor; *@
@* @using MudBlazor.Icons; *@

@using System;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.CompilerServices;
@using Microsoft.AspNetCore.Components.Rendering;
@using Microsoft.AspNetCore.Components.Routing;
@using Microsoft.AspNetCore.Components.Web;
@using MudBlazor;

@* <h3>动态组件演示</h3> *@

<div>
    @dc
</div>

@code {

    public class DynamicComponent : ComponentBase
    {
        void ProcessItem(dynamic item, RenderTreeBuilder builder)
        {
            foreach (var property in item) {
                @* Console.WriteLine($"{property.Name}: {property.Value}"); *@
                @* Console.WriteLine(property.Value.GetType()); *@
                if (property.Value.Type is not null) {
                    @* Console.WriteLine(property.Value.Type.ToString()); *@
                }
                
                var t = property.Value.GetType().ToString();
                if ( t == "Newtonsoft.Json.Linq.JObject") {
                    ProcessItem(property.Value, builder);
                    builder.CloseComponent();
                } else if ( t == "Newtonsoft.Json.Linq.JArray") {
                    @* Console.WriteLine(property.Name); *@
                    if (property.Name == "ChildContent") {
                        builder.AddAttribute(1, property.Name, (RenderFragment)(builder1 =>
                        {
                            foreach (var property1 in property.Value) {
                                @* Console.WriteLine("property1");
                                Console.WriteLine(property1); *@
                                ProcessItem(property1, builder1);
                            }
                            @* foreach (var row2 in (List<IDictionary<string, object>>)att1.Value)
                            {
                                foreach (var entry2 in row2)
                                {
                                    Console.WriteLine($"{entry2.Key}: {entry2.Value}");
                                    if (entry2.Key == "Content") {
                                        builder2.AddContent(3, entry2.Value.ToString());
                                    }
                                }
                            } *@
                        }));  
                    } else {
                        foreach (var property1 in property.Value) {
                            @* Console.WriteLine(property1); *@
                            ProcessItem(property1, builder);
                        }
                    }
                } else if ( t == "Newtonsoft.Json.Linq.JValue") {
                    if (property.Name == "Type") {
                        builder.OpenComponent(0, Type.GetType(property.Value.ToString()));
                        if (property.Value.ToString() == "MudBlazor.MudButton, MudBlazor") {
                            @* builder.AddAttribute(1, "OnClick", EventCallback.Factory.Create(this, OnButtonClick)); *@
                            @* builder.AddAttribute(1, "OnClick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.UIMouseEventArgs>(this, OnButtonClick)); *@
                            string d = property.Value.ToString();
                            builder.AddAttribute(1, "OnClick", 
                                Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<
                                    Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>>(
                                        Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(
                                            this, (e) => OnButtonClick(e, d))));
                        }
                    }
                    else {
                        @* Console.WriteLine($"{property.Name}: {property.Value}"); *@
                        if (property.Name == "Content") {
                            builder.AddContent(3, property.Value.ToString());
                        } else {
                            if (property.Name == "Color" || property.Name == "IconColor") {
                                builder.AddAttribute(1, property.Name, (Color)Enum.Parse(typeof(Color), property.Value.ToString()));
                            }
                            else if (property.Name == "Variant") {
                                builder.AddAttribute(1, property.Name, (Variant)Enum.Parse(typeof(Variant), property.Value.ToString()));
                            }
                            else if (property.Name == "Size") {
                                builder.AddAttribute(1, property.Name, (Size)Enum.Parse(typeof(Size), property.Value.ToString()));
                            }
                            else if (property.Name == "Icon" || property.Name == "StartIcon") {
                                var val = property.Value.ToString();
                                if (val.IndexOf("Icons.Material.Filled") == 0) {
                                    var iconName = val.Replace("Icons.Material.Filled.", "");
                                    var iconField = typeof(Icons.Material.Filled).GetField(iconName);
                                    if (iconField is not null) {
                                        builder.AddAttribute(1, property.Name, iconField.GetValue(null));
                                    } 
                                }
                            }
                            else {
                                if (property.Value.Type.ToString() == "String") {
                                    builder.AddAttribute(1, property.Name, property.Value.ToString());
                                } else if (property.Value.Type.ToString() == "Integer") {
                                    builder.AddAttribute(1, property.Name, Convert.ToInt32(property.Value));
                                } else if (property.Value.Type.ToString() == "Boolean") {
                                    builder.AddAttribute(1, property.Name, Convert.ToBoolean(property.Value));
                                }
                            }
                        }
                    }
                }
            }
        }

        protected override void BuildRenderTree(RenderTreeBuilder builder)
        {
            using (var sr = new StreamReader(@"test.json", System.Text.Encoding.UTF8))
            {
                // 変数 jsonReadData にファイルの内容を代入 
                var jsonReadData = sr.ReadToEnd();
                @* Console.WriteLine(jsonReadData); *@
                // デシリアライズして person にセット
                var jsonString = JsonConvert.DeserializeObject(jsonReadData).ToString();
                @* Console.WriteLine(jsonString); *@

                dynamic result = JsonConvert.DeserializeObject(jsonString);
                foreach (var item in result)
                {
                    ProcessItem(item, builder);
                }
            }

            @* builder.OpenComponent(0, Type.GetType("MudBlazor.MudPaper, MudBlazor"));
            builder.AddAttribute(1, "Class", "pa-16 ma-2");
            builder.AddAttribute(1, "Height", "300px");
            builder.AddAttribute(1, "Width", "300px");
            builder.AddAttribute(1, "Elevation", 3);
            builder.AddAttribute(2, "ChildContent", (RenderFragment)(builder1 =>
            {
                builder1.OpenComponent(0, Type.GetType("MudBlazor.MudButton, MudBlazor"));
                builder1.AddAttribute(1, "Color", (Color)Enum.Parse(typeof(Color), "Primary"));
                builder1.AddAttribute(1, "Variant", (Variant)Enum.Parse(typeof(Variant), "Filled"));
                builder1.AddAttribute(2, "ChildContent", (RenderFragment)(buttonBuilder =>
                {
                    buttonBuilder.AddContent(3, "Click me");
                }));
                builder1.CloseComponent();
            }));
            builder.CloseComponent(); *@

            @* string json = @"
            [
                {
                    ""Type"": ""MudBlazor.MudPaper, MudBlazor"",
                    ""Attribute"": {
                        ""Class"": ""pa-16 ma-2"",
                        ""Height"": ""300px"",
                        ""Width"": ""300px"",
                        ""Elevation"": 3,
                        ""ChildContent"": [
                            {
                                ""Type"": ""MudBlazor.MudRating, MudBlazor"",
                                ""Attribute"": {
                                    ""SelectedValue"": 2
                                }
                            },
                            {
                                ""Type"": ""MudBlazor.MudButton, MudBlazor"",
                                ""Attribute"": {
                                    ""Color"": ""Primary"",
                                    ""Variant"": ""Filled"",
                                    ""ChildContent"": [
                                        {
                                            ""Content"": ""Click me""
                                        }
                                    ]
                                }
                            }
                        ]
                    }
                }
            ]";

            dynamic result = JsonConvert.DeserializeObject(json);
            foreach (var item in result)
            {
                ProcessItem(item, builder);
            } *@
        }
    }

    private RenderFragment dc { get; set; }

    void ProcessItem(dynamic item, RenderTreeBuilder builder)
    {
        foreach (var property in item) {
            @* Console.WriteLine($"{property.Name}: {property.Value}"); *@
            @* Console.WriteLine(property.Value.GetType()); *@
            if (property.Value.Type is not null) {
                @* Console.WriteLine(property.Value.Type.ToString()); *@
            }
            
            var t = property.Value.GetType().ToString();
            if ( t == "Newtonsoft.Json.Linq.JObject") {
                @* if (property.Name != "Type" && property.Name != "Attribute") {
                    Console.WriteLine(property.Name);
                    var pv = property.Value;
                    foreach (var k in pv) {
                        Console.WriteLine(k.Name);
                    }
                }  *@
                if (property.Name != "Type" && property.Name != "Attribute") {
                    @* Console.WriteLine(property.Name); *@
                    var pv = property.Value;
                    foreach (var k in pv) {
                        @* Console.WriteLine(k.Name); *@
                        if (k.Name == "Bind") {
                            @* Console.WriteLine(k.Value); *@
                            Values[k.Value["Id"].ToString()] = k.Value["Value"];
                            if (k.Value["Value"].Type.ToString() == "Boolean") {
                                @* builder.AddAttribute(1, property.Name, BindConverter.FormatValue(Convert.ToBoolean(Values[k.Value["Id"].ToString()]))); *@
                                builder.AddAttribute(1, property.Name, Convert.ToBoolean(Values[k.Value["Id"].ToString()]));
                                @* builder.AddAttribute(1, "Open", RuntimeHelpers.TypeCheck(Convert.ToBoolean(Values[k.Value["Id"].ToString()]))); *@
                                builder.AddAttribute(1, "OpenChanged", 
                                    RuntimeHelpers.TypeCheck(
                                        EventCallback.Factory.Create(
                                            this, 
                                            RuntimeHelpers.CreateInferredEventCallback(
                                                this, 
                                                (bool __value) =>
                                                {
                                                    @* Values["Open"] = __value; *@
                                                    _key = k.Value["Id"].ToString();
                                                    open = __value;
                                                }, 
                                                @* Values["Open"] *@
                                                open
                                            )
                                        )
                                    )
                                );
                                @* builder.AddAttribute(1, "OpenChanged", EventCallback.Factory.Create<Boolean>((object)this, (Action)Calc)); *@
                                @* builder.AddAttribute(1, "OpenChanged", EventCallback.Factory.CreateBinder(this, delegate(Boolean __value)
                                {
                                    Values[k.Value["Id"].ToString()] = __value;
                                }, Values[k.Value["Id"].ToString()])); *@
                                @* builder.AddAttribute(1, property.Name, BindConverter.FormatValue(open)); *@
                            }
                            @* builder.AddAttribute(1, property.Name, BindConverter.FormatValue(Values[k.Value["Id"].ToString()])); *@
                        }
                    }
                } 
                else {
                    @* Console.WriteLine("ProcessItem0"); *@
                    ProcessItem(property.Value, builder);
                    builder.CloseComponent();
                }
            } else if ( t == "Newtonsoft.Json.Linq.JArray") {
                @* Console.WriteLine(property.Name); *@
                if (property.Name == "ChildContent") {
                    builder.AddAttribute(1, property.Name, (RenderFragment)(builder1 =>
                    {
                        foreach (var property1 in property.Value) {
                            @* Console.WriteLine("property1");
                            Console.WriteLine(property1); *@
                            @* Console.WriteLine("ProcessItem1"); *@
                            ProcessItem(property1, builder1);
                        }
                        @* foreach (var row2 in (List<IDictionary<string, object>>)att1.Value)
                        {
                            foreach (var entry2 in row2)
                            {
                                Console.WriteLine($"{entry2.Key}: {entry2.Value}");
                                if (entry2.Key == "Content") {
                                    builder2.AddContent(3, entry2.Value.ToString());
                                }
                            }
                        } *@
                    }));  
                }
                @* else if (property.Name == "Bind") {
                    Console.WriteLine("Bind");
                } *@
                else {
                    foreach (var property1 in property.Value) {
                        @* Console.WriteLine(property1); *@
                        @* Console.WriteLine("ProcessItem2"); *@
                        ProcessItem(property1, builder);
                    }
                }
            } else if ( t == "Newtonsoft.Json.Linq.JValue") {
                if (property.Name == "Type") {
                    builder.OpenComponent(0, Type.GetType(property.Value.ToString()));
                    if (property.Value.ToString() == "MudBlazor.MudButton, MudBlazor") {
                        @* builder.AddAttribute(1, "OnClick", EventCallback.Factory.Create(this, OnButtonClick)); *@
                        @* builder.AddAttribute(1, "OnClick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.UIMouseEventArgs>(this, OnButtonClick)); *@
                        @* string d = property.Value.ToString();
                        builder.AddAttribute(1, "OnClick", 
                            Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<
                                Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>>(
                                    Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(
                                        this, (e) => OnButtonClick(e, d)))); *@
                        builder.AddAttribute(1, "OnClick", EventCallback.Factory.Create<MouseEventArgs>((object)this, (Action)Calc));
                    }
                    if (property.Value.ToString() == "MudBlazor.MudIconButton, MudBlazor") {
                        builder.AddAttribute(1, "OnClick", EventCallback.Factory.Create<MouseEventArgs>((object)this, (Action)OpenDrawer));
                    }
                    @* if (property.Value.ToString() == "MudBlazor.MudDrawer, MudBlazor") {
                        builder.AddAttribute(1, "Open", BindConverter.FormatValue(open));
                    } *@
                }
                @* else if (property.Name == "Bind") {
                    Console.WriteLine("Bind");
                } *@
                else {
                    @* Console.WriteLine($"{property.Name}: {property.Value}"); *@
                    if (property.Name == "Content") {
                        builder.AddContent(3, property.Value.ToString());
                    } else {
                        if (property.Name == "Color" || property.Name == "IconColor") {
                            builder.AddAttribute(1, property.Name, (Color)Enum.Parse(typeof(Color), property.Value.ToString()));
                        }
                        else if (property.Name == "Variant") {
                            builder.AddAttribute(1, property.Name, (Variant)Enum.Parse(typeof(Variant), property.Value.ToString()));
                        }
                        else if (property.Name == "Size") {
                            builder.AddAttribute(1, property.Name, (Size)Enum.Parse(typeof(Size), property.Value.ToString()));
                        }
                        else if (property.Name == "Icon" || property.Name == "StartIcon") {
                            var val = property.Value.ToString();
                            if (val.IndexOf("Icons.Material.Filled") == 0) {
                                var iconName = val.Replace("Icons.Material.Filled.", "");
                                var iconField = typeof(Icons.Material.Filled).GetField(iconName);
                                if (iconField is not null) {
                                    builder.AddAttribute(1, property.Name, iconField.GetValue(null));
                                } 
                            }
                        }
                        else {
                            if (property.Value.Type.ToString() == "String") {
                                builder.AddAttribute(1, property.Name, property.Value.ToString());
                            } else if (property.Value.Type.ToString() == "Integer") {
                                builder.AddAttribute(1, property.Name, Convert.ToInt32(property.Value));
                            } else if (property.Value.Type.ToString() == "Boolean") {
                                builder.AddAttribute(1, property.Name, Convert.ToBoolean(property.Value));
                            } else {
                                Console.WriteLine(property.Value.Type.ToString());
                            }
                        }
                    }
                }
            }
        }
    }

    private void OnInput1(ChangeEventArgs e, string key)
    {
        @* CurrentValue = e.Value as string; *@
        Console.WriteLine(e);
        Console.WriteLine(key);
        Console.WriteLine($"OnInput: \"{e.Value}\"");
    }

    protected override void OnInitialized()
    {
        // 创建动态组件的实例
        dc = builder =>
        {
            @* builder.OpenComponent(0, typeof(DynamicComponent));
            builder.CloseComponent(); *@
            
            using (var sr = new StreamReader(@"test.json", System.Text.Encoding.UTF8))
            {
                // 変数 jsonReadData にファイルの内容を代入 
                var jsonReadData = sr.ReadToEnd();
                // デシリアライズして person にセット
                var jsonString = JsonConvert.DeserializeObject(jsonReadData).ToString();

                dynamic result = JsonConvert.DeserializeObject(jsonString);
                foreach (var item in result)
                {
                    ProcessItem(item, builder);
                }
            }

            @* builder.OpenElement(0, "input");
            builder.AddAttribute(1, "type", "text");
            builder.AddAttribute(2, "value", BindConverter.FormatValue(Value1));
            builder.AddAttribute(3, "onchange", EventCallback.Factory.CreateBinder(this, delegate(int __value)
            {
                Value1 = __value;
            }, Value1));
            builder.SetUpdatesAttributeName("value");
            builder.CloseElement();
            builder.AddMarkupContent(4, "\r\n+\r\n");
            builder.OpenElement(5, "input");
            builder.AddAttribute(6, "type", "text");
            builder.AddAttribute(7, "value", BindConverter.FormatValue(Value2));
            builder.AddAttribute(8, "onchange", EventCallback.Factory.CreateBinder(this, delegate(int __value)
            {
                Value2 = __value;
            }, Value2));
            builder.SetUpdatesAttributeName("value");
            builder.CloseElement();
            builder.AddMarkupContent(9, "\r\n=\r\n");
            builder.OpenElement(10, "input");
            builder.AddAttribute(11, "type", "text");
            builder.AddAttribute(12, "readonly", "true");
            builder.AddAttribute(13, "value", Result);
            builder.CloseElement();
            builder.AddMarkupContent(14, "\r\n<br>\r\n");
            builder.OpenElement(15, "input");
            builder.AddAttribute(16, "type", "button");
            builder.AddAttribute(17, "onclick", EventCallback.Factory.Create<MouseEventArgs>((object)this, (Action)Calc));
            builder.AddAttribute(18, "value", "計算");
            builder.CloseElement(); *@

        };
    }
    
    public Dictionary<string, object> Values = new Dictionary<string, object> (){};

    public int Value1 { get; set; } = 0;
    
    public int Value2 { get; set; } = 0;

    private string _key = "";
    private bool _open;

	private bool open
    {
        get
        {
            return _open; // 外部から取得される
        }       
        set
        {
            _open = !value; // 外部から設定する
            Console.WriteLine("Button clicked!");
            Console.WriteLine(_key);
            Console.WriteLine(_open);
            Values[_key] = _open;
        }      
    }
    
    public void OpenDrawer()
    {
        @* Console.WriteLine("OpenDrawer");
        Console.WriteLine(Values["openDrawer"]);
        Values["openDrawer"] = true; *@
        @* Console.WriteLine(open);
        open = !open;
        Console.WriteLine(Value1); *@
        _key = "openDrawer";
        open = true; 
    }

    public int Result { get; set; } = 0;
    public void Calc() {
        Console.WriteLine("Calc");
        this.Result = this.Value1 + this.Value2;
        Console.WriteLine($"Value1:{this.Value1}");
        Console.WriteLine($"Value2:{this.Value2}");
        Console.WriteLine($"Result:{this.Result}");
        
        @* ChangeCalcResult.InvokeAsync(this.Result); *@
    }

    private static void OnButtonClick1()
    {
        // 处理按钮点击事件的逻辑
        Console.WriteLine("Button clicked1!");
    }

    private static void OnButtonClick(MouseEventArgs e, string additionalParameter)
    {
        Console.WriteLine("Button clicked!");
        // 处理按钮点击事件的逻辑，并使用传递的参数
        Console.WriteLine($"Button clicked! X: {e.ClientX}, Y: {e.ClientY}, Additional Parameter: {additionalParameter}");
    }
}
