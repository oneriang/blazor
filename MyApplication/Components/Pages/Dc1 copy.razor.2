@page "/dc1"
@using Microsoft.AspNetCore.Components.Rendering;
@* @using System.Text.Json; *@
@using Newtonsoft.Json;
@using System.ComponentModel;

@* @using Newtonsoft.Json; *@
@using Newtonsoft.Json.Linq;
@using System;

<h3>动态组件演示</h3>

<div>
    @dc
</div>

@code {

    @* private dcInfo = new List<Dictionary<string, object>>()
    {
        new Dictionary<string, object> ()
        {
            { "Type", "MudBlazor.MudPaper, MudBlazor" },
            { "Attribute" , new Dictionary<string, object>()
                {
                    { "Class", "pa-16 ma-2" },
                    { "Height", "300px" },
                    { "Width", "300px" },
                    { "Elevation", 3 }
                }
            }
        }
    }; *@

    public class DynamicComponent : ComponentBase
    {
        @* private List<Dictionary<string, object>> dcInfo = new List<Dictionary<string, object>>()
        {
            new Dictionary<string, object>()
            {
                { "Type", "MudBlazor.MudPaper, MudBlazor" },
                { "Attribute" , new Dictionary<string, object>()
                    {
                        { "Class", "pa-16 ma-2" },
                        { "Height", "300px" },
                        { "Width", "300px" },
                        { "Elevation", 3 },
                        { "ChildContent", new List<IDictionary<string, object>>()
                            {
                                new Dictionary<string, object>()
                                    {
                                        { "Type", "MudBlazor.MudRating, MudBlazor" },
                                        { "Attribute" , new Dictionary<string, object>()
                                            {
                                                { "SelectedValue", 2 }
                                            }
                                        }
                                    },
                                new Dictionary<string, object>()
                                    {
                                        { "Type", "MudBlazor.MudButton, MudBlazor" },
                                        { "Attribute" , new Dictionary<string, object>()
                                            {
                                                { "Color", "Primary" },
                                                { "Variant", "Filled" },
                                                { "ChildContent", new List<IDictionary<string, object>>() 
                                                    {
                                                        new Dictionary<string, object>()
                                                        {
                                                            { "Content", "Click me" }
                                                        },
                                                    }
                                                }
                                            }
                                        }
                                    }
                            }
                        }
                    }
                }
            }
        }; *@

        @* void ProcessItem(dynamic item, string prefix = "")
        {
            if (item.Type is not null)
            {
                Console.WriteLine($"{prefix}Type");
                Console.WriteLine(item.Type);
            }
            
            if (item.Attribute is not null)
            {
                Console.WriteLine($"{prefix}Attribute");
                Console.WriteLine(item.Attribute);
                
                foreach (var property in item.Attribute)
                {
                    Console.WriteLine($"{property.Name}: {property.Value}");
                    if (property.Name == "ChildContent") {
                        foreach (var childItem in property.Value)
                        {
                            ProcessItem(childItem, $"{prefix}");
                        }
                    }
                }

                if (item.Attribute.ChildContent is not null)
                {
                    foreach (var childItem in item.Attribute.ChildContent)
                    {
                        ProcessItem(childItem, $"{prefix}");
                    }
                }
            }
        } *@

        void ProcessItem(dynamic item, RenderTreeBuilder builder)
        {
            foreach (var property in item) {
                Console.WriteLine($"{property.Name}: {property.Value}");
                @* Console.WriteLine(property.Value.GetType()); *@
                if (property.Value.Type is not null) {
                    Console.WriteLine(property.Value.Type.ToString());
                }
                
                var t = property.Value.GetType().ToString();
                if ( t == "Newtonsoft.Json.Linq.JObject") {
                    ProcessItem(property.Value, builder);
                    builder.CloseComponent();
                } else if ( t == "Newtonsoft.Json.Linq.JArray") {
                    Console.WriteLine(property.Name);
                    if (property.Name == "ChildContent") {
                        builder.AddAttribute(1, property.Name, (RenderFragment)(builder1 =>
                        {
                            foreach (var property1 in property.Value) {
                                Console.WriteLine("property1");
                                Console.WriteLine(property1);
                                ProcessItem(property1, builder1);
                            }
                            @* foreach (var row2 in (List<IDictionary<string, object>>)att1.Value)
                            {
                                foreach (var entry2 in row2)
                                {
                                    Console.WriteLine($"{entry2.Key}: {entry2.Value}");
                                    if (entry2.Key == "Content") {
                                        builder2.AddContent(3, entry2.Value.ToString());
                                    }
                                }
                            } *@
                        }));  
                    } else {
                        foreach (var property1 in property.Value) {
                            Console.WriteLine(property1);
                            ProcessItem(property1, builder);
                        }
                    }
                } else if ( t == "Newtonsoft.Json.Linq.JValue") {
                    if (property.Name == "Type") {
                        builder.OpenComponent(0, Type.GetType(property.Value.ToString()));
                    }
                    else {
                        Console.WriteLine($"{property.Name}: {property.Value}");
                        if (property.Name == "Content") {
                            builder.AddContent(3, property.Value.ToString());
                        } else {
                            if (property.Name == "Color") {
                                builder.AddAttribute(1, property.Name, (Color)Enum.Parse(typeof(Color), property.Value.ToString()));
                            }
                            else if (property.Name == "Variant") {
                                builder.AddAttribute(1, property.Name, (Variant)Enum.Parse(typeof(Variant), property.Value.ToString()));
                            }
                            else {
                                if (property.Value.Type.ToString() == "String") {
                                    builder.AddAttribute(1, property.Name, property.Value.ToString());
                                } else if (property.Value.Type.ToString() == "Integer") {
                                    builder.AddAttribute(1, property.Name, Convert.ToInt32(property.Value));
                                }
                            }
                        }
                    }
                }
            }
        }

        protected override void BuildRenderTree(RenderTreeBuilder builder)
        {
            @* Console.WriteLine("dcInfo");
            Console.WriteLine(dcInfo); *@
            @* string jsonString = JsonSerializer.Serialize(dcInfo);
            Console.WriteLine(jsonString); *@
            @* string jsonStringD = JsonSerializer.Deserialize(jsonString, typeof(List<Dictionary<string, object>>));
            Console.WriteLine(jsonStringD); *@
            @* string jsonString = JsonConvert.SerializeObject(dcInfo); *@
            @* Console.WriteLine(jsonString); *@
            @* List<Dictionary<String, Object>> jsonStringD = JsonConvert.DeserializeObject<List<Dictionary<String, Object>>>(jsonString);
            Console.WriteLine("jsonStringD");
            Console.WriteLine(jsonStringD); *@

            @* using (var sr = new StreamReader(@"test.json", System.Text.Encoding.UTF8))
            {
                // 変数 jsonReadData にファイルの内容を代入 
                var jsonReadData = sr.ReadToEnd();
                Console.WriteLine(jsonReadData);
                // デシリアライズして person にセット
                var jsonStringD = JsonConvert.DeserializeObject(jsonReadData);
                Console.WriteLine(jsonStringD);
            } *@

            builder.OpenComponent(0, Type.GetType("MudBlazor.MudPaper, MudBlazor"));
            builder.AddAttribute(1, "Class", "pa-16 ma-2");
            builder.AddAttribute(1, "Height", "300px");
            builder.AddAttribute(1, "Width", "300px");
            builder.AddAttribute(1, "Elevation", 3);
            builder.AddAttribute(2, "ChildContent", (RenderFragment)(builder1 =>
            {
                builder1.OpenComponent(0, Type.GetType("MudBlazor.MudButton, MudBlazor"));
                builder1.AddAttribute(1, "Color", (Color)Enum.Parse(typeof(Color), "Primary"));
                builder1.AddAttribute(1, "Variant", (Variant)Enum.Parse(typeof(Variant), "Filled"));
                builder1.AddAttribute(2, "ChildContent", (RenderFragment)(buttonBuilder =>
                {
                    buttonBuilder.AddContent(3, "Click me");
                }));
                builder1.CloseComponent();
            }));
            builder.CloseComponent();

            string json = @"
            [
                {
                    ""Type"": ""MudBlazor.MudPaper, MudBlazor"",
                    ""Attribute"": {
                        ""Class"": ""pa-16 ma-2"",
                        ""Height"": ""300px"",
                        ""Width"": ""300px"",
                        ""Elevation"": 3,
                        ""ChildContent"": [
                            {
                                ""Type"": ""MudBlazor.MudRating, MudBlazor"",
                                ""Attribute"": {
                                    ""SelectedValue"": 2
                                }
                            },
                            {
                                ""Type"": ""MudBlazor.MudButton, MudBlazor"",
                                ""Attribute"": {
                                    ""Color"": ""Primary"",
                                    ""Variant"": ""Filled"",
                                    ""ChildContent"": [
                                        {
                                            ""Content"": ""Click me""
                                        }
                                    ]
                                }
                            }
                        ]
                    }
                }
            ]";

            dynamic result = JsonConvert.DeserializeObject(json);
            foreach (var item in result)
            {
                ProcessItem(item, builder);
            }
            
            @* foreach (var item in result) {
                if (item.Type is not null) {
                    Console.WriteLine("item.Type");
                    Console.WriteLine(item.Type);
                }
                if (item.Attribute is not null) {
                    Console.WriteLine("item.Attribute");
                    Console.WriteLine(item.Attribute);
                    if (item.Attribute.ChildContent is not null) {
                        foreach (var item1 in item.Attribute.ChildContent) {
                            if (item1.Type is not null) {
                                Console.WriteLine("item1.Type");
                                Console.WriteLine(item1.Type);
                            }
                            if (item1.Attribute is not null) {
                                Console.WriteLine("item1.Attribute");
                                Console.WriteLine(item1.Attribute);
                                if (item1.Attribute.ChildContent is not null) {
                                    foreach (var item2 in item1.Attribute.ChildContent) {

                                    }
                                }
                            }
                        }
                    }
                }
            } *@
            @* foreach (var row in result) {
                Console.WriteLine("ooooooooooooooooo--------------1");
                Console.WriteLine(row);
                foreach (var entry in row) {
                    Console.WriteLine("ooooooooooooooooo--------------2");
                    Console.WriteLine(entry);
                    Console.WriteLine(TypeDescriptor.GetProperties(entry));
                    foreach (PropertyDescriptor pd in TypeDescriptor.GetProperties(entry))
                    {
                        Console.WriteLine(pd.Name);
                        object obj2 = pd.GetValue(entry);
                        Console.WriteLine("obj2");
                        Console.WriteLine(obj2);
                    }
                }
            } *@

            @* Console.WriteLine("ooooooooooooooooo--------------1");

            foreach (var row in jsonStringD)
            {
                Console.WriteLine(row);
                foreach (var entry in row)
                {
                    Console.WriteLine($"{entry.Key}: {entry.Value}");
                }
            }

            Console.WriteLine("ooooooooooooooooo--------------"); *@

            @* foreach (var row in result)
            {
                Console.WriteLine(row);
                foreach (var entry in row)
                {
                    Console.WriteLine($"{entry.Key}: {entry.Value}");
                    if (entry.Key == "Type") {
                        builder.OpenComponent(0, Type.GetType(entry.Value.ToString()));
                    }
                    else if (entry.Key == "Attribute") {
                        foreach (var att in (Dictionary<string, object>)entry.Value) {
                            if (att.Key == "ChildContent") {
                                builder.AddAttribute(2, "ChildContent", (RenderFragment)(builder1 =>
                                {
                                    foreach (var row1 in (List<IDictionary<string, object>>)att.Value) {
                                        foreach (var entry1 in row1)
                                        {
                                            Console.WriteLine($"{entry1.Key}: {entry1.Value}");
                                            if (entry1.Key == "Type") {
                                                builder1.OpenComponent(0, Type.GetType(entry1.Value.ToString()));
                                            }
                                            else if (entry1.Key == "Attribute") {
                                                foreach (var att1 in (Dictionary<string, object>)entry1.Value) {
                                                    if (att1.Key == "ChildContent") 
                                                    {
                                                        builder1.AddAttribute(2, "ChildContent", (RenderFragment)(builder2 =>
                                                        {
                                                            foreach (var row2 in (List<IDictionary<string, object>>)att1.Value)
                                                            {
                                                                foreach (var entry2 in row2)
                                                                {
                                                                    Console.WriteLine($"{entry2.Key}: {entry2.Value}");
                                                                    if (entry2.Key == "Content") {
                                                                        builder2.AddContent(3, entry2.Value.ToString());
                                                                    }
                                                                }
                                                            }
                                                        }));  
                                                    } 
                                                    else 
                                                    {
                                                        if (att1.Key == "Color")
                                                        {
                                                            builder1.AddAttribute(1, att1.Key, (Color)Enum.Parse(typeof(Color), att1.Value.ToString()));
                                                        }
                                                        else if (att1.Key == "Variant")
                                                        {
                                                            builder1.AddAttribute(1, att1.Key, (Variant)Enum.Parse(typeof(Variant), att1.Value.ToString()));
                                                        }
                                                        else
                                                        {
                                                            builder1.AddAttribute(1, att1.Key, att1.Value);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        builder1.CloseComponent();
                                    }
                                }));
                            } else {
                                builder.AddAttribute(1, att.Key, att.Value);
                            }
                        }
                    }
                }
                builder.CloseComponent();
                Console.WriteLine("--------------");
            } *@
        }
    }

    @* static void TraverseJson(JToken jsonToken, string parentKey = "")
    {
        if (jsonToken.Type == JTokenType.Object)
        {
            foreach (var property in ((JObject)jsonToken).Properties())
            {
                string key = !string.IsNullOrEmpty(parentKey) ? $"{parentKey}.{property.Name}" : property.Name;
                TraverseJson(property.Value, key);
            }
        }
        else if (jsonToken.Type == JTokenType.Array)
        {
            int index = 0;
            foreach (var item in (JArray)jsonToken)
            {
                TraverseJson(item, $"{parentKey}[{index}]");
                index++;
            }
        }
        else
        {
            Console.WriteLine($"{parentKey}: {jsonToken}");
        }
    } *@

    static void TraverseJson(JToken jsonToken, string parentKey = "")
    {
        if (jsonToken.Type == JTokenType.Object)
        {
            foreach (var property in ((JObject)jsonToken).Properties())
            {
                string key = !string.IsNullOrEmpty(parentKey) ? $"{parentKey}.{property.Name}" : property.Name;
                TraverseJson(property.Value, key);
            }
        }
        else if (jsonToken.Type == JTokenType.Array)
        {
            int index = 0;
            foreach (var item in (JArray)jsonToken)
            {
                TraverseJson(item, $"{parentKey}[{index}]");
                index++;
            }
        }
        else
        {
            Console.WriteLine($"{parentKey}: {jsonToken}");
        }
    }

    private RenderFragment dc { get; set; }

    protected override void OnInitialized()
    {
        string jsonData = @"
        [
            {
                ""Type"": ""MudBlazor.MudPaper, MudBlazor"",
                ""Attribute"": {
                    ""Class"": ""pa-16 ma-2"",
                    ""Height"": ""300px"",
                    ""Width"": ""300px"",
                    ""Elevation"": 3,
                    ""ChildContent"": [
                        {
                            ""Type"": ""MudBlazor.MudRating, MudBlazor"",
                            ""Attribute"": {
                                ""SelectedValue"": 2
                            }
                        },
                        {
                            ""Type"": ""MudBlazor.MudButton, MudBlazor"",
                            ""Attribute"": {
                                ""Color"": ""Primary"",
                                ""Variant"": ""Filled"",
                                ""ChildContent"": [
                                    {
                                        ""Content"": ""Click me""
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        ]";

        @* dynamic result = JsonConvert.DeserializeObject(json);
        Console.WriteLine(result[0].Attribute.ChildContent); *@

        @* // 输出转换后的词典数据
        foreach (var item in result)
        {
            foreach (var kvp in item)
            {
                Console.WriteLine($"{kvp.Key}: {kvp.Value}");
            }
            Console.WriteLine();
        } *@

        @* // Parse JSON data
        JObject jsonObject = JsonConvert.DeserializeObject<JObject>(jsonData);

        // Traverse JSON data
        TraverseJson(jsonObject); *@

        @* // Parse JSON data
        JArray jsonArray = JArray.Parse(jsonData);

        // Traverse JSON data
        TraverseJson(jsonArray); *@

        // 创建动态组件的实例
        dc = builder =>
        {
            builder.OpenComponent(0, typeof(DynamicComponent));
            builder.CloseComponent();
        };
    }
}
