@page "/home"
@using BlazorApp.Data
@using System.Data
@* @using System.Data.SQLite *@
@using Microsoft.Data.Sqlite

<PageTitle>Home</PageTitle>

@if (tableList == null)
{
    <p>Loading...</p>
}
else
{
    @* <MudPaper Width="300px">
        <MudList SelectedItemChanged="OnSelectedItemChanged" Clickable="true">
            @foreach (var item in tableList)
            {
                <MudListItem Text="@item.TableName" Value="@item.TableName"/>
            }
        </MudList>
    </MudPaper> *@
    <MudSelect T="string" ValueChanged="OnSelectedItemChanged" Label="Table" AnchorOrigin="Origin.BottomCenter">
        @* <MudSelectItem Value="@("Cappuccino")" />
        <MudSelectItem Value="@("Cafe Latte")" />
        <MudSelectItem Value="@("Espresso")" /> *@
        @foreach (var item in tableList)
        {
            <MudSelectItem Text="@item.TableName" Value="@item.TableName"/>
        }
    </MudSelect>
    <p>
        Selected value: @selectedValue
    </p>
}

@if (data == null)
{
    <p>Loading...</p>
}
else
{
    <MyTable DataList="@data" />
    @* <table class="table">
        <thead>
            <tr>
                @foreach (var col in selectedTable.Columns)
                {
                    <th>@col.ColumnName</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var item in data)
            {
                <tr>
                    @foreach (var entry in item)
                    {
                        <td>@entry.Value</td>
                    }
                </tr>
            }
        </tbody>
    </table> *@
}

@* 
<h3>Dynamic Entity Page</h3>

<div>
    <h4>Table Information</h4>
    @if (tableInfo != null)
    {
        <ul>
            <li>Table Name: @tableInfo.TableName</li>
            <li>
                <h5>Columns:</h5>
                <ul>
                    @foreach (var column in tableInfo.Columns)
                    {
                        <li>@column.ColumnName - @column.DataType</li>
                    }
                </ul>
            </li>
        </ul>
    }
</div>

<div>
    <h4>CRUD Operations</h4>

    <button @onclick="InsertData">Insert Data</button>
    <button @onclick="UpdateData">Update Data</button>
    <button @onclick="DeleteData">Delete Data</button>
</div>

<div>
    <h4>Insert Data</h4>

    <form @onsubmit="InsertData">
        @foreach (var column in tableInfo.Columns)
        {
            <div>
                <label for="@column.ColumnName">@column.ColumnName:</label>
                <input type="text" id="@column.ColumnName" @bind="insertDataValues[column.ColumnName]" />
            </div>
        }
        <button type="submit">Submit</button>
    </form>
</div>

<div>
    <h4>Data Query</h4>

    <button @onclick="QueryData">Query Data</button>
    @if (queryResults != null)
    {
        <table>
            <thead>
                <tr>
                    @foreach (var column in tableInfo.Columns)
                    {
                        <th>@column.ColumnName</th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var row in queryResults)
                {
                    <tr>
                        @foreach (var entry in row)
                        {
                            <td>@entry.Value</td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    }
</div> *@

@code {
    private DynamicEntity dynamicEntity;
    private string connectionString = "Data Source=Chinook.db;";
    private string tableName = "Artist";
    private List<TableInfo> tableList;
    private TableInfo selectedTable;
    string? listboxValue;

    private List<Dictionary<string, object>> queryResults;
    private Dictionary<string, object> insertDataValues = new Dictionary<string, object>();

    private int primaryKeyValue = 1;

    private List<Dictionary<string, object>> data;

    @* MudSelectItem<string> selectedItem; *@
    object selectedValue = "";

    protected override void OnInitialized()
    {
        base.OnInitialized();

        tableList = DynamicEntity.GetTableList(connectionString);
    }

    private void OnSelectedItemChanged(string e)
    {
        @* Console.WriteLine(e); *@
        tableName = e;
        selectedValue = tableName;
        Console.WriteLine(tableName);

        selectedTable = tableList.Find(x => x.TableName == tableName);

        List<TableInfo> tableInfo = GetTableInfo(connectionString, tableName);
        @* Console.WriteLine(tableInfo); *@
       
        dynamicEntity = CreateDynamicEntity(tableInfo);
@* 
        if (tableName == "Artist") {
            InsertData();
        } *@
        data = QueryData();
    }

    private void InsertData()
    {
        Console.WriteLine("InsertData");
        Console.WriteLine(dynamicEntity.properties["ArtistId"]);
        Console.WriteLine(dynamicEntity.properties["Name"]);
        dynamicEntity.SetValue("ArtistId", 276);
        dynamicEntity.SetValue("Name", "AAA");
        Console.WriteLine(dynamicEntity.properties["ArtistId"]);
        Console.WriteLine(dynamicEntity.properties["Name"]);
        dynamicEntity.Insert(connectionString, tableName);
    }

    private void UpdateData()
    {
        dynamicEntity.SetValue("ColumnName", "NewValue");
        dynamicEntity.Update(connectionString, tableName, GetPrimaryKeyValues());
    }

    private void DeleteData()
    {
        dynamicEntity.Delete(connectionString, tableName, GetPrimaryKeyValues());
    }

    private List<Dictionary<string, object>> QueryData()
    {
        List<Dictionary<string, object>> queryResults = dynamicEntity.Select(connectionString, tableName);

        return queryResults;
    }

    private Dictionary<string, object> GetPrimaryKeyValues()
    {
        // Replace with the actual logic to get primary key values
        return new Dictionary<string, object>
        {
            {"PrimaryKeyColumn", primaryKeyValue}
        };
    }
}

@code {

    @* private List<TableInfo> GetTableInfo(string connectionString, string tableName)
    {
        List<TableInfo> tableInfo = new List<TableInfo>();

        using (SQLiteConnection connection = new SQLiteConnection(connectionString))
        {
            connection.Open();

            string query = $"PRAGMA table_info('{tableName}');";

            using (SQLiteCommand command = new SQLiteCommand(query, connection))
            {
                using (SQLiteDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        TableInfo info = new TableInfo
                            {
                                ColumnName = reader["name"].ToString(),
                                DataType = reader["type"].ToString()
                            };

                        tableInfo.Add(info);
                    }
                }
            }
        }

        return tableInfo;
    } *@

private List<TableInfo> GetTableInfo(string connectionString, string tableName)
{
    List<TableInfo> tableInfo = new List<TableInfo>();

    using (SqliteConnection connection = new SqliteConnection(connectionString))
    {
        connection.Open();

        string query = $"PRAGMA table_info('{tableName}');";

        using (SqliteCommand command = new SqliteCommand(query, connection))
        {
            using (SqliteDataReader reader = command.ExecuteReader())
            {
                while (reader.Read())
                {
                    TableInfo info = new TableInfo
                    {
                        ColumnName = reader["name"].ToString(),
                        DataType = reader["type"].ToString()
                        // ... (other properties)
                    };

                    tableInfo.Add(info);
                }
            }
        }
    }

    return tableInfo;
}

    private DynamicEntity CreateDynamicEntity(List<TableInfo> tableInfo)
    {
        DynamicEntity dynamicEntity = new DynamicEntity();

        foreach (var info in tableInfo)
        {
            dynamicEntity.AddProperty(info.ColumnName, GetDefaultValueForType(info.DataType));
        }

        return dynamicEntity;
    }

    private object GetDefaultValueForType(string dataType)
    {
        switch (dataType.ToLower())
        {
            case "integer":
                return 0;
            case "text":
                return string.Empty;
            // 根据需要添加其他数据类型的情况
            default:
                return null;
        }
    }

}