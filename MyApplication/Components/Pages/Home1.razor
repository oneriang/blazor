@page "/home1"
@using MyApplication.Data
@using System.Data
@* @using Microsoft.Data.Sqlite *@
@inject SqliteProvider SqliteProvider
@inject SqlServerProvider SqlServerProvider
@inject MySqlProvider MySqlProvider
@inject PostgreSqlProvider PostgreSqlProvider
@inject DynamicEntityService dynamicEntityService

<PageTitle>Home</PageTitle>

<p>Select Database:</p>
<select @bind="selectedDatabase">
    <option value="sqlite">SQLite</option>
    <option value="sqlserver">SQL Server</option>
    <option value="postgresql">PostgreSQL</option>
    <option value="mysql">MySQL</option>
</select>

<button @onclick="ExecuteBusinessLogic">Execute Business Logic</button>

<MudButton Color="Color.Primary" Variant="Variant.Filled" @onclick="InsertData">InsertData</MudButton>
<MudButton Color="Color.Primary" Variant="Variant.Filled" @onclick="UpdateData">UpdateData</MudButton>
<MudButton Color="Color.Primary" Variant="Variant.Filled" @onclick="DeleteData">DeleteData</MudButton>

@if (tableList == null)
{
    <p>Loading...</p>
}
else
{
    <MudSelect T="string" ValueChanged="OnSelectedItemChanged" Label="Table" AnchorOrigin="Origin.BottomCenter">
    @foreach (var item in tableList)
        {
            <MudSelectItem Text="@item.TableName" Value="@item.TableName" />
        }
        </MudSelect>
    <p>
    Selected value: @tableName
    </p>
}

@if (queryResults == null)
{
    <p>Loading...</p>
}
else
{
    <MyTable DataList="@queryResults" />
}

@code {
    private DynamicEntity1 dynamicEntity;
    private string connectionString = "Data Source=Chinook.db;";
    private string connectionStringSqlserver = "Data Source=localhost;Initial Catalog=Chinook;User Id=sa;Password=Password.1;TrustServerCertificate=true;";
    private string connectionStringMysql = "Server=localhost;Database=Chinook;User Id=root;Password=root;Port=33060;";
    private string connectionStringPostgreSQL = "Host=localhost;Port=54321;Database=Chinook;User Id=postgres;Password=root;";
    private string schemaName = "public";
    private string tableName = "";
    private List<TableInfo> tableList;
    private Dictionary<string, TableInfo> dicTableInfo;

    private string selectedDatabase = "sqlite";

    private void ExecuteBusinessLogic()
    {
        switch (selectedDatabase.ToLower())
        {
            case "sqlite":
                dynamicEntity = new DynamicEntity1(SqliteProvider, connectionString);
                break;
            case "sqlserver":
                dynamicEntity = new DynamicEntity1(SqlServerProvider, connectionStringSqlserver);
                break;
            case "postgresql":
                dynamicEntity = new DynamicEntity1(PostgreSqlProvider, connectionStringPostgreSQL, schemaName);
                break;
            case "mysql":
                dynamicEntity = new DynamicEntity1(MySqlProvider, connectionStringMysql);
                break;
            default:
                throw new ArgumentException($"Unknown database selected: {selectedDatabase}");
        }

        // dynamicEntityService.SetDynamicEntity(dynamicEntity);
        // dynamicEntity = dynamicEntityService.GetDynamicEntity();
        dynamicEntityService.DynamicEntity = dynamicEntity;

        @* dynamicEntity = new DynamicEntity1(SqliteProvider, connectionString); *@
        @* dynamicEntity = new DynamicEntity1(SqlServerProvider, connectionStringSqlserver); *@
        @* dynamicEntity = new DynamicEntity1(MySqlProvider, connectionStringMysql); *@
        @* dynamicEntity = new DynamicEntity1(PostgreSqlProvider, connectionStringPostgreSQL, schemaName); *@
        tableList = dynamicEntity.GetTableList();
        Console.WriteLine(tableList);
        dicTableInfo = dynamicEntity.GetDicTableInfo();
        Console.WriteLine(dicTableInfo);
    }

    private List<Dictionary<string, object>> queryResults;
    protected override void OnInitialized()
    {
        base.OnInitialized();

         ExecuteBusinessLogic();
        @* tableListSqlserver = dynamicEntitySqlserver.GetTableList(); *@
    }

    private void OnSelectedItemChanged(string e)
    {
        Console.WriteLine("OnSelectedItemChanged---------");
        tableName = e;
        dynamicEntityService.SelectedItem1 = null;
        dynamicEntityService.TableName = tableName;
        dynamicEntity.GetTableInfo(tableName);
        // Console.WriteLine(tableName);
        // Console.WriteLine(dicTableInfo[tableName].TableName);
        // Console.WriteLine(dicTableInfo[tableName].Columns);
        // foreach(var col in dicTableInfo[tableName].Columns){
        //     Console.WriteLine(col.ColumnName);
        //     Console.WriteLine(col.DataType);
        // }
        QueryData();
    }

    private void InsertData()
    {
        Console.WriteLine("InsertData");
        Dictionary<string, object> valuesToInsert = new Dictionary<string, object>{
            {"ArtistId", 277},
            {"Name", "AAA"}
        };
        dynamicEntity.Insert(tableName, valuesToInsert);
        QueryData();
    }

    private void UpdateData()
    {
        Console.WriteLine("UpdateData");
        Dictionary<string, object> whereKeyValues = new Dictionary<string, object>(){
            {"ArtistId", 277}
        };
        Dictionary<string, object> valuesToUpdate = new Dictionary<string, object>(){
            {"Name", "DDD"}
        };
        dynamicEntity.Update(tableName, whereKeyValues, valuesToUpdate);
        QueryData();
    }

    private void DeleteData()
    {
        Console.WriteLine("DeleteData");
        Dictionary<string, object> whereKeyValues = new Dictionary<string, object>(){
            {"ArtistId", 277}
        };
        dynamicEntity.Delete(tableName, whereKeyValues);
        QueryData();
    }

    private List<Dictionary<string, object>> QueryData()
    {
        queryResults = dynamicEntity.Select(tableName);

        return queryResults;
    }
}