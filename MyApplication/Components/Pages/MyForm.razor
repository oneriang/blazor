@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using MyApplication.Data
@inject DynamicEntityService dynamicEntityService
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.CompilerServices;
@using Microsoft.AspNetCore.Components.Rendering;
@using Microsoft.AspNetCore.Components.Web;
@using MudBlazor;


@code {
    [Parameter]
    public Dictionary<string, object> FormData
    {
        get
        {
            return _formData;
        }
        set
        {
            _formData = value;
        }
    }

    private static Dictionary<string, object> _formData;

    private DynamicEntity1 dynamicEntity;
    protected override void OnInitialized()
    {
        dynamicEntity = dynamicEntityService.DynamicEntity;
    }

    private IDictionary<string, object> parameters = new Dictionary<string, object>
    {
        { "Value", "aaa" }
    };

    private IDictionary<string, object> getParameters(KeyValuePair<string, object> item) {
        return new Dictionary<string, object>
                {
                    { "Label", item.Key },
                    { "Value", _formData[item.Key] },
                };
    }

    private Type getType(string type="") {
        return Type.GetType("MudBlazor.MudTextField`1[System.Object], MudBlazor");
    }
}

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                @if (_formData is not null)
                {
                    @foreach (var item in _formData)
                    {
                        // Console.WriteLine(item.Key);
                        // Console.WriteLine(item.Value.ToString());
                        // Console.WriteLine(item.Value.GetType());
                        //  Console.WriteLine(dynamicEntity.CurrentTableInfo.DicColumns[item.Key].DataType);
                        // @if (item.Value.GetType().ToString() == "System.String") {
                        //     <MudTextField T="string" Value="@item.Value.ToString()" Label="@item.Key" ValueChanged="(e => onchange(e.ToString(), item.Key))" /> 
                        // }
                        // else if (item.Value.GetType().ToString() == "System.Int64") {
                        //     <MudTextField T="long" Value="@((long)item.Value)" Label="@item.Key" ValueChanged="(e => onchange(e.ToString(), item.Key))" /> 
                        // }
                        // @if (item.Value.GetType().ToString() == "System.String") {
                        //     <MudTextField T="string" Value="@item.Value.ToString()" Label="@item.Key" ValueChanged="(e => onchange1(e, item.Key))" /> 
                        // }
                        // else if (item.Value.GetType().ToString() == "System.Int64") {
                        //     <MudTextField T="long" Value="@((long)item.Value)" Label="@item.Key" ValueChanged="(e => onchange1(e, item.Key))" /> 
                        // }
                        @if (dynamicEntity.CurrentTableInfo.DicColumns[item.Key].DataType == "DATETIME") {
                            // <MudTextField T="string" Value="@item.Value.ToString()" Label="@item.Key" ValueChanged="(e => onchange1(e, item.Key))" /> 
                            <MudTextField T="DateTime?" Format="s" Value="@DateTime.Parse(item.Value.ToString())" Label="DateTimeLocal" InputType="InputType.DateTimeLocal" ValueChanged="(e => onchange1(e, item.Key))"/>
                        }
                        else if (dynamicEntity.CurrentTableInfo.DicColumns[item.Key].DataType == "INTEGER") {
                            @if (item.Value.GetType().ToString() != "System.DBNull") {
                                <MudTextField T="long" Value="@((long)item.Value)" Label="@item.Key" ValueChanged="(e => onchange1(e, item.Key))" /> 
                            } else {
                                <MudTextField T="long" Value="0" Label="@item.Key" ValueChanged="(e => onchange1(e, item.Key))" /> 
                            }
                        }
                        else {
                            <MudTextField T="string" Value="@item.Value.ToString()" Label="@item.Key" ValueChanged="(e => onchange1(e, item.Key))" /> 
                        }
                    }
                }
            </MudForm>
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" DisableElevation="true" OnClick="Insert">Insert</MudButton>
            <MudButton Variant="Variant.Filled" DisableElevation="true" OnClick="Update">Update</MudButton>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
            @foreach (var error in errors)
            {
                <MudText Color="@Color.Error">@error</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>


@code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;

    void onchange(string e, string key){
        Console.WriteLine($"Input changed for {e}");                                        
        Console.WriteLine($"Input changed for {key}");                             

        _formData[key] = e.ToString();         
    }

    void onchange1(object e, string key){
        Console.WriteLine($"Input changed for {e}");                                        
        Console.WriteLine($"Input changed for {key}");                             

       // _formData[key] = e.ToString();
        _formData[key] = e;
    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }

    private void InsertData()
    {
        Console.WriteLine("InsertData");
        Dictionary<string, object> valuesToInsert = new Dictionary<string, object>();
        foreach(var item in _formData) {
            valuesToInsert[item.Key] = item.Value;
        }
        dynamicEntity.Insert(dynamicEntityService.TableName, valuesToInsert);
    }

    private void UpdateData()
    {
        Console.WriteLine("UpdateData");
        Dictionary<string, object> primaryKeyValues = new Dictionary<string, object>();
        Dictionary<string, object> valuesToUpdate = new Dictionary<string, object>();
        foreach(var item in _formData) {
            if (dynamicEntity.CurrentTableInfo.DicColumns[item.Key].PrimaryKey) {
                primaryKeyValues[item.Key] = item.Value;
            } else {
                valuesToUpdate[item.Key] = item.Value;
            }
        }
        dynamicEntity.Update(dynamicEntityService.TableName, primaryKeyValues, valuesToUpdate);
    }

    private void Insert()
    {
        Console.WriteLine("Insert---------------");
        InsertData();
    }

    private void Update()
    {
        Console.WriteLine("Update---------------");
        UpdateData();
    }

}
