@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using MyApplication.Data
@inject DynamicEntityService dynamicEntityService
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.CompilerServices;   @using Microsoft.AspNetCore.Components.Rendering;
@using Microsoft.AspNetCore.Components.Web;
@using MudBlazor;


@code {
    [Parameter]
    public Dictionary<string, object> FormData
    {
        get
        {
            return _formData;
        }
        set
        {
            _formData = value;
        }
    }

    private static Dictionary<string, object> _formData;

    private DynamicEntity1 dynamicEntity;
    protected override void OnInitialized()
    {
        dynamicEntity = dynamicEntityService.GetDynamicEntity();
    }

    private IDictionary<string, object> parameters = new Dictionary<string, object>
    {
        { "Value", "aaa" }
    };

    private IDictionary<string, object> getParameters(KeyValuePair<string, object> item) {
        return new Dictionary<string, object>
                {
                    { "Label", item.Key },
                    { "Value", _formData[item.Key] },
@*{"ValueChanged",
                    EventCallback.
Factory.Create(this, RuntimeHelpers.CreateInferredEventCallback(this, delegate(string __value)                                        {                                                                  _formData[item.Key] = __value;                          }, _formData[item.Key]))}*@
                    @* { "Required", true },
                    { "RequiredError", item.Key + " is required!" } *@
                };
    }

    private Type getType(string type="") {
        return Type.GetType("MudBlazor.MudTextField`1[System.Object], MudBlazor");
    }
}

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                @if (_formData is not null)
                {
                    @foreach (var item in _formData)
                    {
                        Console.WriteLine(item.GetType());
Console.WriteLine(item.Value.GetType());
                        <MudTextField  Value="@item.Value.ToString()" Label="@item.Key" ValueChanged="(e => onchange(e.ToString(), item.Key))" /> 
                        @* <DynamicComponent Type="@(Type.GetType("MudBlazor.MudTextField`1[System.Object], MudBlazor"))"
                            Parameters="@(new Dictionary<string, object>
                            {
                                { "Label", @item.Key },
                                { "Value", @item.Value },
                                { "Required", true },
                                { "RequiredError", @item.Key + " is required!" }
                            })" /> 
                        <DynamicComponent Type="@getType()" Parameters="@getParameters(item)" />*@
@*<DynamicComponent Type="@getType()" Parameters="@getParameters(item)" />*@
                    }
                }

                @* <MudTextField T="string" Label="Username" Required="true" RequiredError="User name is required!" />
                <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!"
                Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />
                <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="pwField1"
                InputType="InputType.Password"
                Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                RequiredError="Password is required!"/>
                <MudTextField T="string"
                Label="Password" HelperText="Repeat the password" InputType="InputType.Password"
                Validation="@(new Func<string, string>(PasswordMatch))"/>
                <div class="d-flex">
                <MudRadioGroup T="string" Required="true" RequiredError="Account type is required!">
                <MudRadio Option="@("Personal")">Personal</MudRadio>
                <MudRadio Option="@("Professional")">Professional</MudRadio>
                </MudRadioGroup>
                </div> *@
                @* <div class="d-flex align-center justify-space-between">
                <MudCheckBox T="bool" Required="true" RequiredError="You must agree" Label="I agree!" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)"
                Class="ml-auto">Register</MudButton>
                </div> *@
            </MudForm>
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true"
                OnClick="@(()=>form.Validate())">Validate</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true"
                OnClick="@(()=>form.ResetAsync())" Class="mx-2">Reset</MudButton>
            <MudButton Variant="Variant.Filled" DisableElevation="true" OnClick="@(()=>form.ResetValidation())">Reset
                Validation</MudButton>
            <MudButton Variant="Variant.Filled" DisableElevation="true" OnClick="Save">
                Save</MudButton>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
            @foreach (var error in errors)
            {
                <MudText Color="@Color.Error">@error</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>


@code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;


void onchange(string e, string key)                                        {

 Console.WriteLine($"Input changed for {e}");                                        
Console.WriteLine($"Input changed for {key}");                             
 
//dictionary1[key] = e.ToString();         
     }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }

    private void InsertData()
    {
        Console.WriteLine("InsertData");
        Console.WriteLine(_formData["ArtistId"]);
        Console.WriteLine(_formData["Name"]);
        Dictionary<string, object> valuesToInsert = new Dictionary<string, object>{
            {"ArtistId", (int)(long)_formData["ArtistId"] + 1},
            {"Name", _formData["Name"]}
        };
        dynamicEntity.Insert(dynamicEntityService.TableName, valuesToInsert);
    }

    private void Save()
    {
        Console.WriteLine(form.Validate());
        InsertData();
    }

}
